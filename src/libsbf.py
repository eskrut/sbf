# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsbf', [dirname(__file__)])
        except ImportError:
            import _libsbf
            return _libsbf
        if fp is not None:
            try:
                _mod = imp.load_module('_libsbf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsbf = swig_import_helper()
    del swig_import_helper
else:
    import _libsbf
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbf.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libsbf.SwigPyIterator_value(self)
    def incr(self, n=1): return _libsbf.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _libsbf.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libsbf.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libsbf.SwigPyIterator_equal(self, *args)
    def copy(self): return _libsbf.SwigPyIterator_copy(self)
    def next(self): return _libsbf.SwigPyIterator_next(self)
    def __next__(self): return _libsbf.SwigPyIterator___next__(self)
    def previous(self): return _libsbf.SwigPyIterator_previous(self)
    def advance(self, *args): return _libsbf.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libsbf.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libsbf.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libsbf.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libsbf.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libsbf.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libsbf.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libsbf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Indexes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Indexes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Indexes, name)
    __repr__ = _swig_repr
    def iterator(self): return _libsbf.Indexes_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libsbf.Indexes___nonzero__(self)
    def __bool__(self): return _libsbf.Indexes___bool__(self)
    def __len__(self): return _libsbf.Indexes___len__(self)
    def pop(self): return _libsbf.Indexes_pop(self)
    def __getslice__(self, *args): return _libsbf.Indexes___getslice__(self, *args)
    def __setslice__(self, *args): return _libsbf.Indexes___setslice__(self, *args)
    def __delslice__(self, *args): return _libsbf.Indexes___delslice__(self, *args)
    def __delitem__(self, *args): return _libsbf.Indexes___delitem__(self, *args)
    def __getitem__(self, *args): return _libsbf.Indexes___getitem__(self, *args)
    def __setitem__(self, *args): return _libsbf.Indexes___setitem__(self, *args)
    def append(self, *args): return _libsbf.Indexes_append(self, *args)
    def empty(self): return _libsbf.Indexes_empty(self)
    def size(self): return _libsbf.Indexes_size(self)
    def clear(self): return _libsbf.Indexes_clear(self)
    def swap(self, *args): return _libsbf.Indexes_swap(self, *args)
    def get_allocator(self): return _libsbf.Indexes_get_allocator(self)
    def begin(self): return _libsbf.Indexes_begin(self)
    def end(self): return _libsbf.Indexes_end(self)
    def rbegin(self): return _libsbf.Indexes_rbegin(self)
    def rend(self): return _libsbf.Indexes_rend(self)
    def pop_back(self): return _libsbf.Indexes_pop_back(self)
    def erase(self, *args): return _libsbf.Indexes_erase(self, *args)
    def __init__(self, *args): 
        this = _libsbf.new_Indexes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libsbf.Indexes_push_back(self, *args)
    def front(self): return _libsbf.Indexes_front(self)
    def back(self): return _libsbf.Indexes_back(self)
    def assign(self, *args): return _libsbf.Indexes_assign(self, *args)
    def resize(self, *args): return _libsbf.Indexes_resize(self, *args)
    def insert(self, *args): return _libsbf.Indexes_insert(self, *args)
    def reserve(self, *args): return _libsbf.Indexes_reserve(self, *args)
    def capacity(self): return _libsbf.Indexes_capacity(self)
    __swig_destroy__ = _libsbf.delete_Indexes
    __del__ = lambda self : None;
Indexes_swigregister = _libsbf.Indexes_swigregister
Indexes_swigregister(Indexes)

SBF_NUM_THREADS = _libsbf.SBF_NUM_THREADS
class event_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, event_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, event_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lock"] = _libsbf.event_t_lock_set
    __swig_getmethods__["lock"] = _libsbf.event_t_lock_get
    if _newclass:lock = _swig_property(_libsbf.event_t_lock_get, _libsbf.event_t_lock_set)
    __swig_setmethods__["event"] = _libsbf.event_t_event_set
    __swig_getmethods__["event"] = _libsbf.event_t_event_get
    if _newclass:event = _swig_property(_libsbf.event_t_event_get, _libsbf.event_t_event_set)
    __swig_setmethods__["flag"] = _libsbf.event_t_flag_set
    __swig_getmethods__["flag"] = _libsbf.event_t_flag_get
    if _newclass:flag = _swig_property(_libsbf.event_t_flag_get, _libsbf.event_t_flag_set)
    def __init__(self): 
        this = _libsbf.new_event_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_event_t
    __del__ = lambda self : None;
event_t_swigregister = _libsbf.event_t_swigregister
event_t_swigregister(event_t)


def event_init(*args):
  return _libsbf.event_init(*args)
event_init = _libsbf.event_init

def event_destroy(*args):
  return _libsbf.event_destroy(*args)
event_destroy = _libsbf.event_destroy

def event_set(*args):
  return _libsbf.event_set(*args)
event_set = _libsbf.event_set

def event_reset(*args):
  return _libsbf.event_reset(*args)
event_reset = _libsbf.event_reset

def event_wait(*args):
  return _libsbf.event_wait(*args)
event_wait = _libsbf.event_wait

def multiplyEvent_wait(*args):
  return _libsbf.multiplyEvent_wait(*args)
multiplyEvent_wait = _libsbf.multiplyEvent_wait

def createNewThread(*args):
  return _libsbf.createNewThread(*args)
createNewThread = _libsbf.createNewThread

def waitThreadDone(*args):
  return _libsbf.waitThreadDone(*args)
waitThreadDone = _libsbf.waitThreadDone

def cancelThread(*args):
  return _libsbf.cancelThread(*args)
cancelThread = _libsbf.cancelThread

def critSecInit(*args):
  return _libsbf.critSecInit(*args)
critSecInit = _libsbf.critSecInit

def critSecBegin(*args):
  return _libsbf.critSecBegin(*args)
critSecBegin = _libsbf.critSecBegin

def critSecEnd(*args):
  return _libsbf.critSecEnd(*args)
critSecEnd = _libsbf.critSecEnd

def critSecDestroy(*args):
  return _libsbf.critSecDestroy(*args)
critSecDestroy = _libsbf.critSecDestroy
OLD_FORMAT = _libsbf.OLD_FORMAT
NEW_FORMAT = _libsbf.NEW_FORMAT
AUTO_FORMAT = _libsbf.AUTO_FORMAT
NOT_DEFINED_FORMAT = _libsbf.NOT_DEFINED_FORMAT
BEAM_LINEAR_3DOF = _libsbf.BEAM_LINEAR_3DOF
BEAM_QUADRATIC_3DOF = _libsbf.BEAM_QUADRATIC_3DOF
BEAM_LINEAR_6DOF = _libsbf.BEAM_LINEAR_6DOF
BEAM_QUADRATIC_6DOF = _libsbf.BEAM_QUADRATIC_6DOF
RECTANGLE_LINEAR = _libsbf.RECTANGLE_LINEAR
RECTANGLE_QUADRATIC = _libsbf.RECTANGLE_QUADRATIC
TRIANGLE_LINEAR = _libsbf.TRIANGLE_LINEAR
TRIANGLE_QUADRATIC = _libsbf.TRIANGLE_QUADRATIC
HEXAHEDRON_LINEAR = _libsbf.HEXAHEDRON_LINEAR
HEXAHEDRON_QUADRATIC = _libsbf.HEXAHEDRON_QUADRATIC
TRIANGLE_PRISM_LINEAR = _libsbf.TRIANGLE_PRISM_LINEAR
TRIANGLE_PRISM_QUADRATIC = _libsbf.TRIANGLE_PRISM_QUADRATIC
TETRAHEDRON_LINEAR = _libsbf.TETRAHEDRON_LINEAR
TETRAHEDRON_QUADRATIC = _libsbf.TETRAHEDRON_QUADRATIC
NO_DEFINED_ELEMENT = _libsbf.NO_DEFINED_ELEMENT
SIMPLE = _libsbf.SIMPLE
FIND_FIRST_NODE = _libsbf.FIND_FIRST_NODE
class sbfMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_sbfMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfMesh
    __del__ = lambda self : None;
    def readCrdFromFile(self, crdName="crd.sba"): return _libsbf.sbfMesh_readCrdFromFile(self, crdName)
    def readIndFromFile(self, *args): return _libsbf.sbfMesh_readIndFromFile(self, *args)
    def readMtrFromFile(self, mtrName="mtr001.sba"): return _libsbf.sbfMesh_readMtrFromFile(self, mtrName)
    def readMeshFromFiles(self, *args): return _libsbf.sbfMesh_readMeshFromFiles(self, *args)
    def writeCrdToFile(self, crdName="crd.sba"): return _libsbf.sbfMesh_writeCrdToFile(self, crdName)
    def writeIndToFile(self, *args): return _libsbf.sbfMesh_writeIndToFile(self, *args)
    def writeMtrToFile(self, *args): return _libsbf.sbfMesh_writeMtrToFile(self, *args)
    def writeMeshToFiles(self, *args): return _libsbf.sbfMesh_writeMeshToFiles(self, *args)
    def writeToVTKFile(self, *args): return _libsbf.sbfMesh_writeToVTKFile(self, *args)
    def node(self, *args): return _libsbf.sbfMesh_node(self, *args)
    def elem(self, *args): return _libsbf.sbfMesh_elem(self, *args)
    def elemPtr(self, *args): return _libsbf.sbfMesh_elemPtr(self, *args)
    def numElements(self): return _libsbf.sbfMesh_numElements(self)
    def numNodes(self): return _libsbf.sbfMesh_numNodes(self)
    def numGroups(self): return _libsbf.sbfMesh_numGroups(self)
    def numNodeGroups(self): return _libsbf.sbfMesh_numNodeGroups(self)
    def printInfo(self): return _libsbf.sbfMesh_printInfo(self)
    def max(self, *args): return _libsbf.sbfMesh_max(self, *args)
    def min(self, *args): return _libsbf.sbfMesh_min(self, *args)
    def maxX(self): return _libsbf.sbfMesh_maxX(self)
    def maxY(self): return _libsbf.sbfMesh_maxY(self)
    def maxZ(self): return _libsbf.sbfMesh_maxZ(self)
    def minX(self): return _libsbf.sbfMesh_minX(self)
    def minY(self): return _libsbf.sbfMesh_minY(self)
    def minZ(self): return _libsbf.sbfMesh_minZ(self)
    def nodeAt(self, *args): return _libsbf.sbfMesh_nodeAt(self, *args)
    def addElement(self, *args): return _libsbf.sbfMesh_addElement(self, *args)
    def insertElement(self, *args): return _libsbf.sbfMesh_insertElement(self, *args)
    def addNode(self, *args): return _libsbf.sbfMesh_addNode(self, *args)
    def deleteNode(self, *args): return _libsbf.sbfMesh_deleteNode(self, *args)
    def mergeNodes(self, tol=0.001): return _libsbf.sbfMesh_mergeNodes(self, tol)
    def renumberNodes(self, *args): return _libsbf.sbfMesh_renumberNodes(self, *args)
    def addElementGroup(self, *args): return _libsbf.sbfMesh_addElementGroup(self, *args)
    def addNodeGroup(self, *args): return _libsbf.sbfMesh_addNodeGroup(self, *args)
    def addMesh(self, *args): return _libsbf.sbfMesh_addMesh(self, *args)
    def reserveNodesNumber(self, *args): return _libsbf.sbfMesh_reserveNodesNumber(self, *args)
    def reserveElementsNumber(self, *args): return _libsbf.sbfMesh_reserveElementsNumber(self, *args)
    def optimizeNodesNumbering(self, *args): return _libsbf.sbfMesh_optimizeNodesNumbering(self, *args)
    def addDVData(self, *args): return _libsbf.sbfMesh_addDVData(self, *args)
    def dVData(self, *args): return _libsbf.sbfMesh_dVData(self, *args)
    def addDSData(self, *args): return _libsbf.sbfMesh_addDSData(self, *args)
    def dSData(self, *args): return _libsbf.sbfMesh_dSData(self, *args)
    def addFVData(self, *args): return _libsbf.sbfMesh_addFVData(self, *args)
    def fVData(self, *args): return _libsbf.sbfMesh_fVData(self, *args)
    def addFSData(self, *args): return _libsbf.sbfMesh_addFSData(self, *args)
    def fSData(self, *args): return _libsbf.sbfMesh_fSData(self, *args)
    def addSolutionBundle(self, *args): return _libsbf.sbfMesh_addSolutionBundle(self, *args)
    def solutionBundle(self, *args): return _libsbf.sbfMesh_solutionBundle(self, *args)
    def scale(self, *args): return _libsbf.sbfMesh_scale(self, *args)
    def translate(self, *args): return _libsbf.sbfMesh_translate(self, *args)
    def rotate(self, *args): return _libsbf.sbfMesh_rotate(self, *args)
    def group(self, *args): return _libsbf.sbfMesh_group(self, *args)
    def processGroups(self): return _libsbf.sbfMesh_processGroups(self)
    def processGroup(self, *args): return _libsbf.sbfMesh_processGroup(self, *args)
    def nodeGroup(self, *args): return _libsbf.sbfMesh_nodeGroup(self, *args)
    def processNodeGroups(self): return _libsbf.sbfMesh_processNodeGroups(self)
    def processNodeGroup(self, *args): return _libsbf.sbfMesh_processNodeGroup(self, *args)
    def clearGroups(self): return _libsbf.sbfMesh_clearGroups(self)
    def clearNodeGroups(self): return _libsbf.sbfMesh_clearNodeGroups(self)
    def clearAllGroups(self): return _libsbf.sbfMesh_clearAllGroups(self)
    __swig_getmethods__["makeBlock"] = lambda x: _libsbf.sbfMesh_makeBlock
    if _newclass:makeBlock = staticmethod(_libsbf.sbfMesh_makeBlock)
sbfMesh_swigregister = _libsbf.sbfMesh_swigregister
sbfMesh_swigregister(sbfMesh)

def sbfMesh_makeBlock(*args):
  return _libsbf.sbfMesh_makeBlock(*args)
sbfMesh_makeBlock = _libsbf.sbfMesh_makeBlock

class sbfNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_sbfNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfNode
    __del__ = lambda self : None;
    def setX(self, x=0.0): return _libsbf.sbfNode_setX(self, x)
    def setY(self, y=0.0): return _libsbf.sbfNode_setY(self, y)
    def setZ(self, z=0.0): return _libsbf.sbfNode_setZ(self, z)
    def x(self): return _libsbf.sbfNode_x(self)
    def y(self): return _libsbf.sbfNode_y(self)
    def z(self): return _libsbf.sbfNode_z(self)
    def crdAtKort(self, *args): return _libsbf.sbfNode_crdAtKort(self, *args)
    def isSame(self, *args): return _libsbf.sbfNode_isSame(self, *args)
    def isSameX(self, *args): return _libsbf.sbfNode_isSameX(self, *args)
    def isSameY(self, *args): return _libsbf.sbfNode_isSameY(self, *args)
    def isSameZ(self, *args): return _libsbf.sbfNode_isSameZ(self, *args)
    def distance(self, *args): return _libsbf.sbfNode_distance(self, *args)
    def rotate(self, *args): return _libsbf.sbfNode_rotate(self, *args)
sbfNode_swigregister = _libsbf.sbfNode_swigregister
sbfNode_swigregister(sbfNode)

class sbfElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_sbfElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfElement
    __del__ = lambda self : None;
    def setNumNodes(self, nNodes=8): return _libsbf.sbfElement_setNumNodes(self, nNodes)
    def setNode(self, *args): return _libsbf.sbfElement_setNode(self, *args)
    def addNode(self, *args): return _libsbf.sbfElement_addNode(self, *args)
    def setNodes(self, *args): return _libsbf.sbfElement_setNodes(self, *args)
    def setMtr(self, material=1): return _libsbf.sbfElement_setMtr(self, material)
    def setType(self, *args): return _libsbf.sbfElement_setType(self, *args)
    def setMesh(self, *args): return _libsbf.sbfElement_setMesh(self, *args)
    def mesh(self): return _libsbf.sbfElement_mesh(self)
    def numNodes(self): return _libsbf.sbfElement_numNodes(self)
    def nodeIndex(self, *args): return _libsbf.sbfElement_nodeIndex(self, *args)
    def indexes(self): return _libsbf.sbfElement_indexes(self)
    def mtr(self): return _libsbf.sbfElement_mtr(self)
    def type(self): return _libsbf.sbfElement_type(self)
    def facesNodesIndexes(self): return _libsbf.sbfElement_facesNodesIndexes(self)
    def centreOfMass(self): return _libsbf.sbfElement_centreOfMass(self)
    def max(self, *args): return _libsbf.sbfElement_max(self, *args)
    def min(self, *args): return _libsbf.sbfElement_min(self, *args)
    def maxX(self): return _libsbf.sbfElement_maxX(self)
    def maxY(self): return _libsbf.sbfElement_maxY(self)
    def maxZ(self): return _libsbf.sbfElement_maxZ(self)
    def minX(self): return _libsbf.sbfElement_minX(self)
    def minY(self): return _libsbf.sbfElement_minY(self)
    def minZ(self): return _libsbf.sbfElement_minZ(self)
    def volume(self): return _libsbf.sbfElement_volume(self)
sbfElement_swigregister = _libsbf.sbfElement_swigregister
sbfElement_swigregister(sbfElement)

class sbfSElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfSElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfSElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_sbfSElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfSElement
    __del__ = lambda self : None;
    def numSElements(self): return _libsbf.sbfSElement_numSElements(self)
    def setIndex(self, *args): return _libsbf.sbfSElement_setIndex(self, *args)
    def index(self): return _libsbf.sbfSElement_index(self)
    def regElemIndexes(self): return _libsbf.sbfSElement_regElemIndexes(self)
    def setRegElemIndexes(self, *args): return _libsbf.sbfSElement_setRegElemIndexes(self, *args)
    def setChildrens(self, *args): return _libsbf.sbfSElement_setChildrens(self, *args)
    def addChildren(self, *args): return _libsbf.sbfSElement_addChildren(self, *args)
    def setMesh(self, *args): return _libsbf.sbfSElement_setMesh(self, *args)
    def mesh(self): return _libsbf.sbfSElement_mesh(self)
    def parent(self): return _libsbf.sbfSElement_parent(self)
    def setParent(self, *args): return _libsbf.sbfSElement_setParent(self, *args)
sbfSElement_swigregister = _libsbf.sbfSElement_swigregister
sbfSElement_swigregister(sbfSElement)

class sbfSELevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfSELevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfSELevel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbf.new_sbfSELevel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfSELevel
    __del__ = lambda self : None;
    def setSize(self, *args): return _libsbf.sbfSELevel_setSize(self, *args)
    def size(self): return _libsbf.sbfSELevel_size(self)
    def setLevelIndex(self, *args): return _libsbf.sbfSELevel_setLevelIndex(self, *args)
    def levelIndex(self): return _libsbf.sbfSELevel_levelIndex(self)
    def setIndex(self, *args): return _libsbf.sbfSELevel_setIndex(self, *args)
    def index(self, *args): return _libsbf.sbfSELevel_index(self, *args)
    def numSE(self): return _libsbf.sbfSELevel_numSE(self)
    def indexesOfSE(self, *args): return _libsbf.sbfSELevel_indexesOfSE(self, *args)
    def setMesh(self, *args): return _libsbf.sbfSELevel_setMesh(self, *args)
    def prev(self): return _libsbf.sbfSELevel_prev(self)
    def next(self): return _libsbf.sbfSELevel_next(self)
    def writeToFile(self, *args): return _libsbf.sbfSELevel_writeToFile(self, *args)
    def readFromFile(self, *args): return _libsbf.sbfSELevel_readFromFile(self, *args)
sbfSELevel_swigregister = _libsbf.sbfSELevel_swigregister
sbfSELevel_swigregister(sbfSELevel)

class sbfSELevelList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfSELevelList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfSELevelList, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbf.new_sbfSELevelList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfSELevelList
    __del__ = lambda self : None;
    def numLevels(self): return _libsbf.sbfSELevelList_numLevels(self)
    def level(self, *args): return _libsbf.sbfSELevelList_level(self, *args)
    def writeToFiles(self, baseName="level", numDigits=3): return _libsbf.sbfSELevelList_writeToFiles(self, baseName, numDigits)
    def readFromFiles(self, baseName="level", numDigits=3): return _libsbf.sbfSELevelList_readFromFiles(self, baseName, numDigits)
    def setMesh(self, *args): return _libsbf.sbfSELevelList_setMesh(self, *args)
    def selevels(self, fakeSEs=None): return _libsbf.sbfSELevelList_selevels(self, fakeSEs)
sbfSELevelList_swigregister = _libsbf.sbfSELevelList_swigregister
sbfSELevelList_swigregister(sbfSELevelList)

class sbfGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfGroup, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbf.new_sbfGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfGroup
    __del__ = lambda self : None;
    def addFilter(self, *args): return _libsbf.sbfGroup_addFilter(self, *args)
    def clearFilters(self): return _libsbf.sbfGroup_clearFilters(self)
    def numFilters(self): return _libsbf.sbfGroup_numFilters(self)
    def filter(self, *args): return _libsbf.sbfGroup_filter(self, *args)
sbfGroup_swigregister = _libsbf.sbfGroup_swigregister
sbfGroup_swigregister(sbfGroup)

class sbfElementGroup(sbfGroup):
    __swig_setmethods__ = {}
    for _s in [sbfGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfElementGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [sbfGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sbfElementGroup, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbf.new_sbfElementGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfElementGroup
    __del__ = lambda self : None;
    def clearGroup(self): return _libsbf.sbfElementGroup_clearGroup(self)
    def reserve(self, *args): return _libsbf.sbfElementGroup_reserve(self, *args)
    def addElement(self, *args): return _libsbf.sbfElementGroup_addElement(self, *args)
    def element(self, *args): return _libsbf.sbfElementGroup_element(self, *args)
    def numElems(self): return _libsbf.sbfElementGroup_numElems(self)
    def type(self): return _libsbf.sbfElementGroup_type(self)
    def setMesh(self, *args): return _libsbf.sbfElementGroup_setMesh(self, *args)
    def setMtr(self, *args): return _libsbf.sbfElementGroup_setMtr(self, *args)
    def elemIndList(self): return _libsbf.sbfElementGroup_elemIndList(self)
    def nodeIndList(self): return _libsbf.sbfElementGroup_nodeIndList(self)
sbfElementGroup_swigregister = _libsbf.sbfElementGroup_swigregister
sbfElementGroup_swigregister(sbfElementGroup)

class sbfNodeGroup(sbfGroup):
    __swig_setmethods__ = {}
    for _s in [sbfGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfNodeGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [sbfGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sbfNodeGroup, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbf.new_sbfNodeGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfNodeGroup
    __del__ = lambda self : None;
    def clearGroup(self): return _libsbf.sbfNodeGroup_clearGroup(self)
    def addNode(self, *args): return _libsbf.sbfNodeGroup_addNode(self, *args)
    def node(self, *args): return _libsbf.sbfNodeGroup_node(self, *args)
    def numNodes(self): return _libsbf.sbfNodeGroup_numNodes(self)
    def setMesh(self, *args): return _libsbf.sbfNodeGroup_setMesh(self, *args)
    def nodeIndList(self): return _libsbf.sbfNodeGroup_nodeIndList(self)
sbfNodeGroup_swigregister = _libsbf.sbfNodeGroup_swigregister
sbfNodeGroup_swigregister(sbfNodeGroup)

class sbfGroupFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfGroupFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfGroupFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libsbf.new_sbfGroupFilter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfGroupFilter
    __del__ = lambda self : None;
    def setMtrF(self, *args): return _libsbf.sbfGroupFilter_setMtrF(self, *args)
    def unsetMtrF(self): return _libsbf.sbfGroupFilter_unsetMtrF(self)
    def setTypeF(self, *args): return _libsbf.sbfGroupFilter_setTypeF(self, *args)
    def unsetTypeF(self): return _libsbf.sbfGroupFilter_unsetTypeF(self)
    def setCrdF(self, *args): return _libsbf.sbfGroupFilter_setCrdF(self, *args)
    def setCrdXF(self, *args): return _libsbf.sbfGroupFilter_setCrdXF(self, *args)
    def setCrdYF(self, *args): return _libsbf.sbfGroupFilter_setCrdYF(self, *args)
    def setCrdZF(self, *args): return _libsbf.sbfGroupFilter_setCrdZF(self, *args)
    def unsetCrdF(self): return _libsbf.sbfGroupFilter_unsetCrdF(self)
    def setMesh(self, *args): return _libsbf.sbfGroupFilter_setMesh(self, *args)
    def isPass(self, *args): return _libsbf.sbfGroupFilter_isPass(self, *args)
sbfGroupFilter_swigregister = _libsbf.sbfGroupFilter_swigregister
sbfGroupFilter_swigregister(sbfGroupFilter)


def crdcmp(*args):
  return _libsbf.crdcmp(*args)
crdcmp = _libsbf.crdcmp

def numNodesInElement(*args):
  return _libsbf.numNodesInElement(*args)
numNodesInElement = _libsbf.numNodesInElement

def typesLibToFile(*args):
  return _libsbf.typesLibToFile(*args)
typesLibToFile = _libsbf.typesLibToFile

def typesFileToLib(*args):
  return _libsbf.typesFileToLib(*args)
typesFileToLib = _libsbf.typesFileToLib

def tryToResolveTypeByNumNodes(*args):
  return _libsbf.tryToResolveTypeByNumNodes(*args)
tryToResolveTypeByNumNodes = _libsbf.tryToResolveTypeByNumNodes
class PropertyNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["param"] = _libsbf.PropertyNode_param_set
    __swig_getmethods__["param"] = _libsbf.PropertyNode_param_get
    if _newclass:param = _swig_property(_libsbf.PropertyNode_param_get, _libsbf.PropertyNode_param_set)
    __swig_setmethods__["value"] = _libsbf.PropertyNode_value_set
    __swig_getmethods__["value"] = _libsbf.PropertyNode_value_get
    if _newclass:value = _swig_property(_libsbf.PropertyNode_value_get, _libsbf.PropertyNode_value_set)
    def __init__(self): 
        this = _libsbf.new_PropertyNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_PropertyNode
    __del__ = lambda self : None;
PropertyNode_swigregister = _libsbf.PropertyNode_swigregister
PropertyNode_swigregister(PropertyNode)

class PropertyTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyTable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_PropertyTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_PropertyTable
    __del__ = lambda self : None;
    def value(self, *args): return _libsbf.PropertyTable_value(self, *args)
    def addNodeValue(self, *args): return _libsbf.PropertyTable_addNodeValue(self, *args)
    def setCurParam(self, *args): return _libsbf.PropertyTable_setCurParam(self, *args)
    def curValue(self): return _libsbf.PropertyTable_curValue(self)
    def name(self): return _libsbf.PropertyTable_name(self)
PropertyTable_swigregister = _libsbf.PropertyTable_swigregister
PropertyTable_swigregister(PropertyTable)

class MaterialProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialProperties, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_MaterialProperties(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_MaterialProperties
    __del__ = lambda self : None;
    def propertyTable(self, *args): return _libsbf.MaterialProperties_propertyTable(self, *args)
    def addTable(self, *args): return _libsbf.MaterialProperties_addTable(self, *args)
    __swig_getmethods__["makeMPropertiesSteel"] = lambda x: _libsbf.MaterialProperties_makeMPropertiesSteel
    if _newclass:makeMPropertiesSteel = staticmethod(_libsbf.MaterialProperties_makeMPropertiesSteel)
MaterialProperties_swigregister = _libsbf.MaterialProperties_swigregister
MaterialProperties_swigregister(MaterialProperties)

def MaterialProperties_makeMPropertiesSteel():
  return _libsbf.MaterialProperties_makeMPropertiesSteel()
MaterialProperties_makeMPropertiesSteel = _libsbf.MaterialProperties_makeMPropertiesSteel

class sbfPropertiesSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sbfPropertiesSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sbfPropertiesSet, name)
    __repr__ = _swig_repr
    def material(self, *args): return _libsbf.sbfPropertiesSet_material(self, *args)
    def addMaterial(self, *args): return _libsbf.sbfPropertiesSet_addMaterial(self, *args)
    def __init__(self): 
        this = _libsbf.new_sbfPropertiesSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_sbfPropertiesSet
    __del__ = lambda self : None;
sbfPropertiesSet_swigregister = _libsbf.sbfPropertiesSet_swigregister
sbfPropertiesSet_swigregister(sbfPropertiesSet)

NO_DEFINED_BLOCK = _libsbf.NO_DEFINED_BLOCK
DIAGONAL_BLOCK = _libsbf.DIAGONAL_BLOCK
UP_TREANGLE_BLOCK = _libsbf.UP_TREANGLE_BLOCK
DOWN_TREANGLE_BLOCK = _libsbf.DOWN_TREANGLE_BLOCK
NO_DEFINED_MATRIX = _libsbf.NO_DEFINED_MATRIX
FULL_MATRIX = _libsbf.FULL_MATRIX
UP_TREANGLE_MATRIX = _libsbf.UP_TREANGLE_MATRIX
DOWN_TREANGLE_MATRIX = _libsbf.DOWN_TREANGLE_MATRIX
EXACT_LOCK_TYPE = _libsbf.EXACT_LOCK_TYPE
APPROXIMATE_LOCK_TYPE = _libsbf.APPROXIMATE_LOCK_TYPE
class StiffMatrixBlock3x3MultiplicationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StiffMatrixBlock3x3MultiplicationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StiffMatrixBlock3x3MultiplicationData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startRow"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_startRow_set
    __swig_getmethods__["startRow"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_startRow_get
    if _newclass:startRow = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_startRow_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_startRow_set)
    __swig_setmethods__["stopRow"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_stopRow_set
    __swig_getmethods__["stopRow"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_stopRow_get
    if _newclass:stopRow = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_stopRow_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_stopRow_set)
    __swig_setmethods__["rowIndexes"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexes_set
    __swig_getmethods__["rowIndexes"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexes_get
    if _newclass:rowIndexes = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexes_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexes_set)
    __swig_setmethods__["rowIndexesLength"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexesLength_set
    __swig_getmethods__["rowIndexesLength"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexesLength_get
    if _newclass:rowIndexesLength = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexesLength_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_rowIndexesLength_set)
    __swig_setmethods__["stiffMatrix"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_stiffMatrix_set
    __swig_getmethods__["stiffMatrix"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_stiffMatrix_get
    if _newclass:stiffMatrix = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_stiffMatrix_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_stiffMatrix_set)
    __swig_setmethods__["vector"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_vector_set
    __swig_getmethods__["vector"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_vector_get
    if _newclass:vector = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_vector_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_vector_set)
    __swig_setmethods__["result"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_result_set
    __swig_getmethods__["result"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_result_get
    if _newclass:result = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_result_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_result_set)
    __swig_setmethods__["thread"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_thread_set
    __swig_getmethods__["thread"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_thread_get
    if _newclass:thread = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_thread_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_thread_set)
    __swig_setmethods__["start"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_start_set
    __swig_getmethods__["start"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_start_get
    if _newclass:start = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_start_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_start_set)
    __swig_setmethods__["stop"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_stop_set
    __swig_getmethods__["stop"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_stop_get
    if _newclass:stop = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_stop_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_stop_set)
    __swig_setmethods__["threadID"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_threadID_set
    __swig_getmethods__["threadID"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_threadID_get
    if _newclass:threadID = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_threadID_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_threadID_set)
    __swig_setmethods__["flagCancel"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_flagCancel_set
    __swig_getmethods__["flagCancel"] = _libsbf.StiffMatrixBlock3x3MultiplicationData_flagCancel_get
    if _newclass:flagCancel = _swig_property(_libsbf.StiffMatrixBlock3x3MultiplicationData_flagCancel_get, _libsbf.StiffMatrixBlock3x3MultiplicationData_flagCancel_set)
    def __init__(self): 
        this = _libsbf.new_StiffMatrixBlock3x3MultiplicationData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_StiffMatrixBlock3x3MultiplicationData
    __del__ = lambda self : None;
StiffMatrixBlock3x3MultiplicationData_swigregister = _libsbf.StiffMatrixBlock3x3MultiplicationData_swigregister
StiffMatrixBlock3x3MultiplicationData_swigregister(StiffMatrixBlock3x3MultiplicationData)

class StiffBlock3x3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StiffBlock3x3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StiffBlock3x3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_StiffBlock3x3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_StiffBlock3x3
    __del__ = lambda self : None;
    def data(self): return _libsbf.StiffBlock3x3_data(self)
    def setType(self, *args): return _libsbf.StiffBlock3x3_setType(self, *args)
    def type(self): return _libsbf.StiffBlock3x3_type(self)
    def indI(self): return _libsbf.StiffBlock3x3_indI(self)
    def indJ(self): return _libsbf.StiffBlock3x3_indJ(self)
    def setIndI(self, *args): return _libsbf.StiffBlock3x3_setIndI(self, *args)
    def setIndJ(self, *args): return _libsbf.StiffBlock3x3_setIndJ(self, *args)
    def dataLength(self): return _libsbf.StiffBlock3x3_dataLength(self)
StiffBlock3x3_swigregister = _libsbf.StiffBlock3x3_swigregister
StiffBlock3x3_swigregister(StiffBlock3x3)

class StiffMatrixBlock3x3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StiffMatrixBlock3x3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StiffMatrixBlock3x3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_StiffMatrixBlock3x3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_StiffMatrixBlock3x3
    __del__ = lambda self : None;
    def updateIndexesFromMesh(self, *args): return _libsbf.StiffMatrixBlock3x3_updateIndexesFromMesh(self, *args)
    def blockPtr(self, *args): return _libsbf.StiffMatrixBlock3x3_blockPtr(self, *args)
    def data(self, *args): return _libsbf.StiffMatrixBlock3x3_data(self, *args)
    def addBlockData(self, *args): return _libsbf.StiffMatrixBlock3x3_addBlockData(self, *args)
    def indData(self): return _libsbf.StiffMatrixBlock3x3_indData(self)
    def shiftIndData(self): return _libsbf.StiffMatrixBlock3x3_shiftIndData(self)
    def ptrDataAlter(self): return _libsbf.StiffMatrixBlock3x3_ptrDataAlter(self)
    def indDataAlter(self): return _libsbf.StiffMatrixBlock3x3_indDataAlter(self)
    def shiftIndDataAlter(self): return _libsbf.StiffMatrixBlock3x3_shiftIndDataAlter(self)
    def setIndData(self, *args): return _libsbf.StiffMatrixBlock3x3_setIndData(self, *args)
    def updataAlterPtr(self): return _libsbf.StiffMatrixBlock3x3_updataAlterPtr(self)
    def numNodes(self): return _libsbf.StiffMatrixBlock3x3_numNodes(self)
    def numBlocks(self): return _libsbf.StiffMatrixBlock3x3_numBlocks(self)
    def setType(self, *args): return _libsbf.StiffMatrixBlock3x3_setType(self, *args)
    def type(self): return _libsbf.StiffMatrixBlock3x3_type(self)
    def null(self, *args): return _libsbf.StiffMatrixBlock3x3_null(self, *args)
    def checkNulls(self): return _libsbf.StiffMatrixBlock3x3_checkNulls(self)
    def compute(self, *args): return _libsbf.StiffMatrixBlock3x3_compute(self, *args)
    def computeParallel(self, *args): return _libsbf.StiffMatrixBlock3x3_computeParallel(self, *args)
    def lockKort(self, *args): return _libsbf.StiffMatrixBlock3x3_lockKort(self, *args)
    def multiplyByVector(self, *args): return _libsbf.StiffMatrixBlock3x3_multiplyByVector(self, *args)
    def prepareParallelMultiplyByVector(self, *args): return _libsbf.StiffMatrixBlock3x3_prepareParallelMultiplyByVector(self, *args)
    def makeParallelMultiplyByVector(self): return _libsbf.StiffMatrixBlock3x3_makeParallelMultiplyByVector(self)
    def clearParallelMultiplyByVector(self): return _libsbf.StiffMatrixBlock3x3_clearParallelMultiplyByVector(self)
    def read(self, *args): return _libsbf.StiffMatrixBlock3x3_read(self, *args)
    def write(self, *args): return _libsbf.StiffMatrixBlock3x3_write(self, *args)
    def printTopology(self, *args): return _libsbf.StiffMatrixBlock3x3_printTopology(self, *args)
    def printTopology2(self, *args): return _libsbf.StiffMatrixBlock3x3_printTopology2(self, *args)
    def setMesh(self, *args): return _libsbf.StiffMatrixBlock3x3_setMesh(self, *args)
    def mesh(self): return _libsbf.StiffMatrixBlock3x3_mesh(self)
    def setPropSet(self, *args): return _libsbf.StiffMatrixBlock3x3_setPropSet(self, *args)
    def propSet(self): return _libsbf.StiffMatrixBlock3x3_propSet(self)
    def makeIncompleteChol(self, thresholdAmp=0): return _libsbf.StiffMatrixBlock3x3_makeIncompleteChol(self, thresholdAmp)
StiffMatrixBlock3x3_swigregister = _libsbf.StiffMatrixBlock3x3_swigregister
StiffMatrixBlock3x3_swigregister(StiffMatrixBlock3x3)

class ElemStiffMatrixHexa8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElemStiffMatrixHexa8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElemStiffMatrixHexa8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libsbf.new_ElemStiffMatrixHexa8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libsbf.delete_ElemStiffMatrixHexa8
    __del__ = lambda self : None;
    def setElem(self, *args): return _libsbf.ElemStiffMatrixHexa8_setElem(self, *args)
    def elem(self): return _libsbf.ElemStiffMatrixHexa8_elem(self)
    def setNumIntPoints(self, *args): return _libsbf.ElemStiffMatrixHexa8_setNumIntPoints(self, *args)
    def numIntPoints(self): return _libsbf.ElemStiffMatrixHexa8_numIntPoints(self)
    def computeH(self, *args): return _libsbf.ElemStiffMatrixHexa8_computeH(self, *args)
    def computeDHDN(self, *args): return _libsbf.ElemStiffMatrixHexa8_computeDHDN(self, *args)
    def computeDHDG(self, *args): return _libsbf.ElemStiffMatrixHexa8_computeDHDG(self, *args)
    def computeJ(self): return _libsbf.ElemStiffMatrixHexa8_computeJ(self)
    def computeSM(self): return _libsbf.ElemStiffMatrixHexa8_computeSM(self)
    def computeMass(self, *args): return _libsbf.ElemStiffMatrixHexa8_computeMass(self, *args)
    def computeVolume(self): return _libsbf.ElemStiffMatrixHexa8_computeVolume(self)
    def getBlockDataLoc(self, *args): return _libsbf.ElemStiffMatrixHexa8_getBlockDataLoc(self, *args)
    def getBlockDataGlob(self, *args): return _libsbf.ElemStiffMatrixHexa8_getBlockDataGlob(self, *args)
    def addBlockDataLoc(self, *args): return _libsbf.ElemStiffMatrixHexa8_addBlockDataLoc(self, *args)
    def addBlockDataGlob(self, *args): return _libsbf.ElemStiffMatrixHexa8_addBlockDataGlob(self, *args)
    def data(self): return _libsbf.ElemStiffMatrixHexa8_data(self)
    def setPropSet(self, *args): return _libsbf.ElemStiffMatrixHexa8_setPropSet(self, *args)
    def propSet(self): return _libsbf.ElemStiffMatrixHexa8_propSet(self)
ElemStiffMatrixHexa8_swigregister = _libsbf.ElemStiffMatrixHexa8_swigregister
ElemStiffMatrixHexa8_swigregister(ElemStiffMatrixHexa8)


def saveNodesDataFloat_NumNodesX3(*args):
  return _libsbf.saveNodesDataFloat_NumNodesX3(*args)
saveNodesDataFloat_NumNodesX3 = _libsbf.saveNodesDataFloat_NumNodesX3
# This file is compatible with both classic and new-style classes.


